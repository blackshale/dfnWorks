
# This LaGriT Scripts reads in the points generated by the Poisson-Disc
# sampling method. Then it reads in the intersection points generated 
# in dfnGEn. All points in the Poisson-Disc set that are too close to
# the line of intersection are removed. Then the mesh is written out 
# in binary LaGriT and AVS UCD format. 

# LaGriT Parameter file 
infile parameters_13.mlgi

# Name of input files that contains the lines of intersection
# and Poisson Points

define / POINT_FILE / points_13.xyz
define / LINE_FILE / intersections_13.inp

# connectivity file used in mesh checking
define / OUTPUT_INTER_ID_SSINT / id_tri_node_13.list

#### READ IN POISSON DISC POINTS

# Create a mesh object named mo_pts
cmo / create / mo_pts / / / triplane

# Read in the three column x,y,z vertex data
cmo / readatt / mo_pts / xic,yic,zic / 1,0,0 / POINT_FILE

# Send some diagnostic output to the screen
cmo / status / brief
cmo / printatt / mo_pts / -xyz- / minmax

# Set imt (integer material type) of all vertices to ID
cmo / setatt / mo_pts / imt / 1 0 0 / ID
# Set itp of all vertices to 0
cmo / setatt / mo_pts / itp / 1 0 0 / 0

# This should not do anything. If there were 2 or more vertices within distance
# epsilon of one another, this would remove all but one. Since the distributions
# should be well behaved, it should not filter/delete any vertices.

filter / 1 0 0
rmpoint / compress
#
# Connect the 2D planar (XY-plane) vertices to create a Delaunay triangular mesh
# with an exterior boundary that is the convex hull of the vertices in mo_pts.
connect
resetpts / itp

# Diagnostic output to the screen on triangle aspect ratio and volume (area)
quality

# Add cell attribute for area and aspect ratio
cmo / addatt / mo_pts / area / tri_area
quality / aspect / y

# Apply two iterations of Laplace smoothing and Lawson flipping to smooth the mesh
# and recover the Delaunay triangulation.
assign///maxiter_sm/ 1                                                           
smooth;recon 0
smooth;recon 1

##### DEBUG #####
# comments out to dump poisson initial triangulation 
# dump / avs2 / output_13.inp / mo_pts
##### DEBUG #####

## Read the lines of intersections into mesh object mo_line_work
read / LINE_FILE / mo_line_work

# Extrude the line mesh a distance H_EXTRUDE in the Z direction (vector 0.,0.,1.) to create a quad mesh.
extrude / mo_quad / mo_line_work / const / H_EXTRUDE / volume / 0. 0. 1. 


# Translate extruded lines of intersection down slightly to excavate 
# nearby points from the mesh 

trans / 1 0 0 / 0. 0. 0. / 0. 0. H_TRANS
hextotet / 2 / mo_tri / mo_quad 
cmo / delete / mo_quad
# Remove (excavate) vertices from mo_pts that fall within the circumscribed sphere of any triangle in mo_tri.
# Place the result in mo_excavate. 
addmesh / excavate / mo_excavate / mo_pts / mo_tri

##### DEBUG #####
# If meshing fails, uncomment and rerun the script to get tmp meshes, 
# which are otherwise not output 
#dump / avs2 / tmp_tri.inp / mo_tri / 1 1 1 0
#dump / avs2 / tmp_pts.inp / mo_pts / 1 1 1 0
#dump / avs2 / tmp_excavate.inp / mo_excavate / 1 1 1 0
##### DEBUG #####

cmo / delete / mo_tri 
cmo / delete / mo_pts 

# recompute dfield 
cmo / create / mo_final / / / triplane 
copypts / mo_final / mo_excavate 
# Compute the distance field between the vertices in mo_line_work (fracture intersections)
# and the vertices in mo_final (fracture mesh vertices).
compute / distance_field / mo_final / mo_line_work / dfield 
# Output min/max values of distance field (dfield)
cmo / printatt / mo_final / dfield / minmax 
pset / pdel / attribute dfield / 1,0,0 / lt H_PRIME 
# Delete any vertices with distance field less than H_PRIME
rmpoint / pset,get,pdel / inclusive  
rmpoint / compress  
# Copy the intersection vertices into the fracture mesh mo_final
copypts / mo_final / mo_line_work  

cmo / select / mo_final 
cmo / setatt / mo_final / imt / 1 0 0 / ID 
cmo / setatt / mo_final / itp / 1 0 0 / 0 
# cmo / printatt / mo_final / -xyz- / minmax 
# Translate the vertices so the bounding box is centered on 0,0,0.
trans/ 1 0 0 / zero / xyz 
# Due to slight numerical jitter, all Z values may not be 0. Set them to 0.
cmo / setatt / mo_final / zic / 1 0 0 / 0.0 
cmo / printatt / mo_final / -xyz- / minmax 
# Connect the 2D planar (XY-plane) vertices to create a Delaunay triangular mesh
# with an exterior boundary that is the convex hull of the vertices in mo_final.
connect 
cmo / setatt / mo_final / itetclr / 1 0 0 / ID 
resetpts / itp 
# Translate back to the original coordinates.
trans / 1 0 0 / original / xyz 
cmo / printatt / mo_final / -xyz- / minmax 

#cmo / delete / mo_line_work 
cmo / delete / mo_excavate
cmo / select / mo_final 

## Massage the mesh where vertices are are not on the boundary and
# not within a distance H_EPS of the intersection vertices.
pset / pref / attribute / dfield / 1,0,0 / lt / H_EPS 
pset / pregion / attribute / dfield / 1,0,0 / gt / H_SCALE2 
pset / pboundary / attribute / itp / 1,0,0 / eq / 10 
pset / psmooth / not / pregion pref pboundary 

assign///maxiter_sm/1 
smooth / position / esug / pset get psmooth
recon 0
smooth / position / esug / pset get psmooth
recon 0
smooth / position / esug / pset get psmooth
recon 1
assign///maxiter_sm/10


###########################################
# nodes for Intersection / Mesh Connectivity Check dump
cmo / copy / mo_final_check / mo_final
#
# Define variables that are hard wired for this part of the workflow
define / MO_TRI_MESH_SSINT / mo_tri_tmp_subset
define / MO_LINE_MESH_SSINT / mo_line_tmp_subset
define / ATT_ID_INTERSECTION_SSINT / b_a
define / ATT_ID_SOURCE_SSINT / id_node_global
define / ATT_ID_SINK_SSINT / id_node_tri
#
# Before subsetting the mesh reate a node attribute containing the integer global node number
cmo / set_id / mo_final_check / node / ATT_ID_SOURCE_SSINT
#
# Subset the triangle mesh based on b_a node attribute ne 0
#
cmo / select / mo_final_check
pset / pkeep / attribute / ATT_ID_INTERSECTION_SSINT / 1 0 0 / ne / 0
pset / pall / seq / 1 0 0
pset / pdel / not pall pkeep
rmpoint / pset get pdel / exclusive
rmpoint / compress
#
# Create an integer node attribute in the line mesh to interpolate the triangle node number onto
# 
cmo / addatt / mo_line_work / ATT_ID_SINK_SSINT / vint / scalar / nnodes
interpolate / voronoi / mo_line_work ATT_ID_SINK_SSINT / 1 0 0 / &
                        mo_final_check  ATT_ID_SOURCE_SSINT
#
# Supress AVS output of a bunch of node attributes
#
cmo / modatt / mo_line_work / imt / ioflag / l
cmo / modatt / mo_line_work / itp / ioflag / l
cmo / modatt / mo_line_work / isn / ioflag / l
cmo / modatt / mo_line_work / icr / ioflag / l
cmo / modatt / mo_line_work / a_b / ioflag / l
cmo / modatt / mo_line_work / b_a / ioflag / l
#
# Output list of intersection nodes with the corresponding node id number from the triangle mesh

dump / avs2 / OUTPUT_INTER_ID_SSINT / mo_line_work / 0 0 2 0
cmo / delete / mo_line_work

cmo / delete / mo_final_check
# nodes for intersection check over

cmo / select / mo_final 

##### DEBUG ###### 
# Write out mesh before it is rotate back into its final location
# Useful to compare with meshing work-flow if something crashes
#dump / avs2 / tmp_mesh_2D.inp / mo_final / 1 1 1 0 
##### DEBUG #####

# Rotate fracture back into original plane 
rotateln / 1 0 0 / nocopy / X1, Y1, Z1 / X2, Y2, Z2 / THETA / 0.,0.,0.,/  
cmo / printatt / mo_final / -xyz- / minmax

# Create cell attributes, xnorm, ynorm, znorm, and fill them with the unit normal vector.
cmo / addatt / mo_final / unit_area_normal / xyz / vnorm 
cmo / addatt / mo_final / scalar / xnorm ynorm znorm / vnorm 
cmo / DELATT / mo_final / vnorm

# Create Family element set
cmo / addatt / mo_final / family_id / vint / scalar / nelements 
cmo / setatt / mo_final / family_id / 1 0 0 / FAMILY

# Output mesh in AVS UCD format - required for connectivity checking, is promptly deleted
dump / OUTFILE_AVS / mo_final
# Output mesh in LaGriT binary format. 
dump / lagrit / OUTFILE_LG / mo_final

quality 
cmo / delete / mo_final 
cmo / status / brief 
finish

